/**  Properties of water and steam as functions of *temperature* and *pressure*
  *  Measurement units of property arguments:
  *      - [T] = K
  *      - [p] = MPa
  */

#include <math.h>
#include "wsif97tp.h"   /// self header
#include "wsif97linetp.h"
#include "wsif97tr.h"

/**  IAPWS R7-97(2012). Region1 **/
namespace r797tp1 {
    constexpr int N {34};
    constexpr int I[N] {
        0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32
    };
    constexpr int J[N] {
        -2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,
        -29, -31,-38,-39,-40,-41
    };
    constexpr double n[N] {
        0.14632971213167   , -0.84548187169114   , -3.756360367204,
        3.3855169168385    , -0.95791963387872   ,  0.15772038513228,
       -0.016616417199501  ,  0.00081214629983568,  0.00028319080123804,
       -0.00060706301565874, -0.018990068218419  , -0.032529748770505,
       -0.021841717175414  , -5.283835796993e-05 , -0.00047184321073267,
       -0.00030001780793026,  4.7661393906987e-05 , -4.4141845330846e-06,
       -7.2694996297594e-16, -3.1679644845054e-05, -2.8270797985312e-06,
       -8.5205128120103e-10, -2.2425281908e-06,    -6.5171222895601e-07,
       -1.4341729937924e-13, -4.0516996860117e-07, -1.2734301741641e-09,
       -1.7424871230634e-10, -6.8762131295531e-19,  1.4478307828521e-20,
        2.6335781662795e-23, -1.1947622640071e-23,  1.8228094581404e-24,
       -9.3537087292458e-26
    };

    /**  Gamma and its derivatives **/
    double g1(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(7.1 - pi, I[i]) * pow(tau - 1.222, J[i]);
        return z;
    }

    double g1p(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += -n[i] * I[i] * pow(7.1 - pi, I[i] - 1) * pow(tau - 1.222, J[i]);
        return z;
    }

    double g1t(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(7.1 - pi, I[i]) * J[i] * pow(tau - 1.222, J[i] - 1);
        return z;
    }

    double g1pp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
        z += n[i] * I[i] * (I[i] - 1) * pow(7.1 - pi, I[i] - 2) * pow(tau - 1.222, J[i]);
        return z;
    }

    double g1tt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(7.1 - pi, I[i]) * J[i] * (J[i] - 1) * pow(tau - 1.222, J[i] - 2);
        return z;
    }

    double g1pt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += -n[i] * I[i] * pow(7.1 - pi, I[i] - 1) * J[i] * pow(tau - 1.222, J[i] - 1);
        return z;
    }

    /**  Properties **/
    double v1Tp(double T, double p)
    {
        const double pi = p/16.53;
        const double v = .4615260e-3 * T * pi * g1p(pi, 1386/T)/p;  /// [m^3/kg]
        return v;
    }

    double u1Tp(double T, double p)
    {
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double u = .4615260 * T * (tau * g1t(pi, tau) - pi * g1p(pi, tau));  /// [kJ/kg]
        return u;
    }

    double s1Tp(double T, double p)
    {
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double s = .4615260 * (tau * g1t(pi, tau) - g1(pi, tau));  /// [kJ/kg/K]
        return s;
    }

    double h1Tp(double T, double p)
    {
        const double h = 639.675036 * g1t(p/16.53, 1386/T);  /// [kJ/kg]
        return h;
    }

    double cp1Tp(double T, double p)
    {
        const double tau = 1386/T;
        const double cp = -tau * tau * g1tt(p/16.53, tau) * .4615260 ;  /// [kJ/kg/K]
        return cp;
    }

    double cv1Tp(double T, double p)
    {
        /// test: c(4.121202, 3.917366, 3.221392)
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double cv = .4615260 *  (
            -tau * tau * g1tt(p/16.53, tau) + pow(
                g1p(pi, tau) - tau * g1pt(pi, tau), 2)/g1pp(pi, tau)
        ) ;  /// [kJ/kg/K]
        return cv;
    }

    double w1Tp(double T, double p)
    {
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double gp = g1p(pi, tau);
        const double w  = sqrt(
            461.5260 * T * pow(gp, 2)/(
                pow(gp - tau * g1pt(pi, tau), 2)/pow(tau, 2)/g1tt(pi, tau) - g1pp(pi, tau)
            )
        );  /// [m/s]
        return w;
    }

    double e1Tp(double T, double p)
    {
        /// cubic expansion coefficient
        /// test: c(0.00027735453342661365, 0.00034409584308888705, 0.0016411812807641884)
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double e = (1 - tau * g1pt(pi, tau)/g1p(pi, tau))/T;  /// [1/K]
        return e;
    }

    double i1Tp(double T, double p)
    {
        /// isothermal compressibility
        /// test: c(0.0004463821228021935, 0.0003720394372317089, 0.0011289218770058733)
        const double tau = 1386/T;
        const double pi = p/16.53;
        const double i = -g1pp(pi, tau)/g1p(pi, tau)/16.53;  /// [1/MPa]
        return i;
    }
}


/**  IAPWS R7-97(2012). Region2 **/
namespace r797tp2 {
    constexpr int N0 {9};
    constexpr int    J0[N0] {0,1,-5,-4,-3,-2,-1,2,3};
    constexpr double n0[N0] {
        -9.6927686500217  ,  10.086655968018  , -0.005608791128302,
        0.071452738081455,  -0.40710498223928,  1.4240819171444  ,
        -4.383951131945   ,  -0.28408632460772,  0.021268463753307
    };

    double g0(double pi, double tau)
    {
        double y = log(pi);
        for (int i = 0; i < N0; i++)
            y += n0[i] * pow(tau, J0[i]);
        return y;
    }

    constexpr double g0p(double pi) { return 1/pi; }

    constexpr double g0pp(double pi) { return -1/pi/pi; }

    double g0t(double tau)
    {
        double y = 0;
        for (int i = 0; i < N0; i++)
            y += n0[i] * J0[i] * pow(tau, J0[i] - 1);
        return y;
    }

    double g0tt(double tau)
    {
        double y = 0;
        for (int i = 0; i < N0; i++)
            y += n0[i] * J0[i] * (J0[i] - 1) * pow(tau, J0[i] - 2);
        return y;
    }

    constexpr int N {43};
    constexpr int I[N] {1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,6,6,6,7,7,7,8,8,9,
                        10,10,10,16,16,18,20,20,20,21,22,23,24,24,24};
    constexpr int J[N] {0,1,2,3,6,1,2,4,7,36,0,1,3,6,35,1,2,3,7,3,16,35,0,11,25,8,
                        36, 13,4,10,14,29,50,57,20,35,48,21,53,39,26,40,58};
    constexpr double n[N] {
        -0.0017731742473213 ,  -0.017834862292358  , -0.045996013696365  ,
        -0.057581259083432  ,  -0.05032527872793   , -3.3032641670203e-05,
        -0.00018948987516315,  -0.0039392777243355 , -0.043797295650573  ,
        -2.6674547914087e-05,   2.0481737692309e-08,  4.3870667284435e-07,
        -3.227767723857e-05 ,  -0.0015033924542148 , -0.040668253562649  ,
        -7.8847309559367e-10,   1.2790717852285e-08,  4.8225372718507e-07,
        2.2922076337661e-06,  -1.6714766451061e-11, -0.0021171472321355 ,
       -23.895741934104     ,  -5.905956432427e-18 , -1.2621808899101e-06,
        -0.038946842435739  ,   1.1256211360459e-11, -8.2311340897998    ,
         1.9809712802088e-08,   1.0406965210174e-19, -1.0234747095929e-13,
        -1.0018179379511e-09,  -8.0882908646985e-11,  0.10693031879409   ,
        -0.33662250574171,      8.9185845355421e-25,  3.0629316876232e-13,
        -4.2002467698208e-06,  -5.9056029685639e-26,  3.7826947613457e-06,
        -1.2768608934681e-15,   7.3087610595061e-29,  5.5414715350778e-17,
        -9.436970724121e-07
    };

    double gg(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * pow(tau - .5, J[i]);
        return z;
    }

    double ggp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * pow(pi, I[i] - 1) * pow(tau - .5, J[i]);
        return z;
    }

    double ggt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * J[i] * pow(tau - .5, J[i] - 1);
        return z;
    }

    double ggpp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * (I[i] - 1) * pow(pi, I[i] - 2) * pow(tau - .5, J[i]);
        return z;
    }

    double ggtt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * J[i] * (J[i] - 1) * pow(tau - .5, J[i] - 2);
        return z;
    }

    double ggpt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * pow(pi, I[i] - 1) * J[i] * pow(tau - .5, J[i] - 1);
        return z;
    }

    /**  Properties **/
    double v2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double v = .4615260e-3 * T * (g0p(pi) + ggp(pi, tau));  /// [m^3/kg]
        return v;
    }

    double u2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double u = .4615260 * T * (tau * (g0t(tau) + ggt(pi, tau)) -
                               pi * (g0p(pi) + ggp(pi, tau)));  /// [kJ/kg]
        return u;
    }

    double s2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double s = .4615260 * (
            tau * (g0t(tau) + ggt(pi, tau)) - (g0(pi, tau) + gg(pi, tau)));  /// [kJ/kg/K]
        return s;
    }

    double h2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double h = 249.22404 * (g0t(tau) + ggt(pi, tau));  /// [kJ/kg]
        return h;
    }

    double cp2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double cp = -.4615260 * tau * tau * (g0tt(tau) + ggtt(pi, tau));  /// [kJ/kg/K]
        return cp;
    }

    double cv2Tp(double T, double p)
    {
        /// test: c(1.441327, 1.619783, 2.975538)
        const double pi = p;
        const double tau = 540/T;
        const double cv = .4615260 * (-tau * tau * (g0tt(tau) + ggtt(pi, tau)) - pow(
              1 + pi * ggp(pi, tau) - tau * pi * ggpt(pi, tau), 2
            ) / (1 - pi * pi * ggpp(pi, tau)));  /// [kJ/kg/K]
        return cv;
    }

    double w2Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double grp = ggp(pi, tau);
        const double w = sqrt(
            461.5260 * T * (1 + 2 * pi * grp + pi * pi * grp * grp) / (
                1 - pi * pi * ggpp(pi, tau) + pow(
                1 + pi * grp - tau * pi * ggpt(pi, tau), 2
            )/tau/tau/(g0tt(tau) + ggtt(pi, tau))
          )
        );  /// [m/s]
        return w;
    }

    double e2Tp(double T, double p)
    {
        /// cubic expansion coefficient
        /// test: c(0.003375783, 0.001428787, 0.012601969)
        const double pi = p;
        const double tau = 540/T;
        const double grp = ggp(pi, tau);
        const double e = (1 + pi * grp - tau * pi * ggpt(pi, tau))/(1 + pi * grp)/T;  /// [1/K]
        return e;
    }

    double i2Tp(double T, double p)
    {
        /// isothermal compressibility
        /// test: c(286.23965139, 285.72546117, 0.08184114)
        const double pi = p;
        const double tau = 540/T;
        const double i = (1 - pi * pi * ggpp(pi, tau))/(1 + pi * ggp(pi, tau))/p;  /// [1/MPa]
        return i;
    }
}

/**  IAPWS R7-97(2012). Region2. Metastable subregion **/
namespace r797tp2metastable {
    constexpr int N0 {9};
    constexpr int    J0[N0] {0,1,-5,-4,-3,-2,-1,2,3};
    constexpr double n0[N0] {
        -9.6937268393049  ,  10.087275970006  , -0.005608791128302,
        0.071452738081455,  -0.40710498223928,  1.4240819171444  ,
        -4.383951131945   ,  -0.28408632460772,  0.021268463753307
    };

    double g0(double pi, double tau)
    {
        double y = log(pi);
        for (int i = 0; i < N0; i++)
            y += n0[i] * pow(tau, J0[i]);
        return y;
    }

    constexpr double g0p(double pi) { return 1/pi; }

    constexpr double g0pp(double pi) { return -1/pi/pi; }

    double g0t(double tau)
    {
        double y = 0;
        for (int i = 0; i < N0; i++)
            y += n0[i] * J0[i] * pow(tau, J0[i] - 1);
        return y;
    }

    double g0tt(double tau)
    {
        double y = 0;
        for (int i = 0; i < N0; i++)
            y += n0[i] * J0[i] * (J0[i] - 1) * pow(tau, J0[i] - 2);
        return y;
    }

    constexpr int N {13};
    constexpr int I[N] {1,1,1,1,2,2,2,3,3,4,4,5,5};
    constexpr int J[N] {0,2,5,11,1,7,16,4,16,7,10,9,10};
    constexpr double n[N] = {
        -0.0073362260186506,  -0.088223831943146 , -0.072334555213245  ,
        -0.0040813178534455,   0.0020097803380207, -0.053045921898642  ,
        -0.007619040908697 ,  -0.0063498037657313, -0.086043093028588  ,
         0.007532158152277 ,  -0.0079238375446139, -0.00022888160778447,
        -0.002645650148281
    };

    double gg(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * pow(tau - .5, J[i]);
        return z;
    }

    double ggp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * pow(pi, I[i] - 1) * pow(tau - .5, J[i]);
        return z;
    }

    double ggt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * J[i] * pow(tau - .5, J[i] - 1);
        return z;
    }

    double ggpp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * (I[i] - 1) * pow(pi, I[i] - 2) * pow(tau - .5, J[i]);
        return z;
    }

    double ggtt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * J[i] * (J[i] - 1) * pow(tau - .5, J[i] - 2);
        return z;
    }

    double ggpt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * pow(pi, I[i] - 1) * J[i] * pow(tau - .5, J[i] - 1);
        return z;
    }

    /**  Properties **/
    double v2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double v = .4615260e-3 * T * (g0p(pi) + ggp(pi, tau));  /// [m^3/kg]
        return v;
    }

    double u2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double u = .4615260 * T * (
            tau * (g0t(tau) + ggt(pi, tau)) - pi * (g0p(pi) + ggp(pi, tau)));  /// [kJ/kg]
        return u;
    }

    double s2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double s = .4615260 * (
            tau * (g0t(tau) + ggt(pi, tau)) - (g0(pi, tau) + gg(pi, tau)));  /// [kJ/kg/K]
        return s;
    }

    double h2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double h = 249.22404 * (g0t(tau) + ggt(pi, tau));  /// [kJ/kg]
        return h;
    }

    double cp2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double cp = -.4615260 * tau * tau * (g0tt(tau) + ggtt(pi, tau));  /// [kJ/kg/K]
        return cp;
    }

    double cv2msTp(double T, double p)
    {
        /// test:  c(1.95830730171417, 2.08622141715772, 2.41213708189681)
        const double pi = p;
        const double tau = 540/T;
        const double cv = .4615260 * (
            -tau * tau * (g0tt(tau) + ggtt(pi, tau)) - pow(
                1 + pi * ggp(pi, tau) - tau * pi * ggpt(pi, tau), 2
            ) / (1 - pi * pi * ggpp(pi, tau)));  /// [kJ/kg/K]
        return cv;
    }

    double w2msTp(double T, double p)
    {
        const double pi = p;
        const double tau = 540/T;
        const double grp = ggp(pi, tau);
        const double w = sqrt(
            461.5260 * T * (1 + 2 * pi * grp + pi * pi * grp * grp) / (
                1 - pi * pi * ggpp(pi, tau) + pow(
                    1 + pi * grp - tau * pi * ggpt(pi, tau), 2
                )/tau/tau/(g0tt(tau) + ggtt(pi, tau))));  /// [m/s]
        return w;
    }

    double e2msTp(double T, double p)
    {
        /// cubic expansion coefficient
        /// test: c(0.00318819824002828, 0.00348506136029719, 0.00418276570800467)
        const double pi = p;
        const double tau = 540/T;
        const double grp = ggp(pi, tau);
        const double e = (1 + pi * grp - tau * pi * ggpt(pi, tau))/(1 + pi * grp)/T;  ///[1/K]
        return e;
    }

    double i2msTp(double T, double p)
    {
        /// isothermal compressibility
        /// test: c(1.093642386060960, 1.111332304399500, 0.787967951887341)
        const double pi = p;
        const double tau = 540/T;
        const double i = (1 - pi * pi * ggpp(pi, tau))/(1 + pi * ggp(pi, tau))/p;  /// [1/MPa]
        return i;
    }
}


/**  IAPWS SR5-05(2016). Region3 **/
namespace sr505tp3{
    /// Tables #4 and #12 together
    constexpr int k {26};
    constexpr double vx[k] {
        0.0024,0.0041,0.0022,0.0029,0.0032,0.0064,0.0027,0.0032,0.0041,0.0054,
        0.0077,0.0026,0.0028,0.0031,0.0034,0.0041,0.0022,0.0054,0.0022,0.0088,
        0.0026,0.0031,0.0039,0.0049,0.0031,0.0038
    };
    constexpr double px[k] {
        100,100,40,40,40,40,25,25,25,25,25,24,23,23,23,23,23,23,21,20,23,23,23,
         23, 22,22
    };
    constexpr double Tx[k] {
        760,860,690,690,710,730,660,660,660,670,680,650,650,650,650,650,650,650,
        640,650,650,650,650,650,650,650
    };
    constexpr int N[k] {
        30,32,35,38,29,42,38,29,42,29,34,43,40,39,24,27,24,27,29,33,38,39,35,36,
        20,23
    };
    constexpr double a[k] {
        0.085,0.280,0.259,0.559,0.587,0.587,0.872,0.898,0.910,0.875,0.802,0.908,
        1.000,0.976,0.974,0.972,0.848,0.874,0.886,0.803,0.902,0.960,0.959,0.910,
        0.996,0.993
    };
    constexpr double b[k] {
        0.817,0.779,0.903,0.939,0.918,0.891,0.971,0.983,0.984,0.964,0.935,0.989,
        0.997,0.997,0.996,0.997,0.983,0.982,0.990,1.020,0.988,0.995,0.995,0.988,
        0.994,0.994
    };
    constexpr double c[k] {
        1,1,1,1,1,0.5,1,1,.5,.5,1,1,1,1,.5,.5,1,1,1,1,1,1,1,1,1,1
    };
    constexpr double d[k] {
        1,1,1,1,1,1,1,1,1,1,1,1,0.25,1,1,1,1,1,1,1,1,1,1,1,1,1
    };
    constexpr int e[k] {1,1,1,4,1,4,4,4,4,4,1,4,1,0,1,1,4,1,4,1,1,1,4,1,4,4};
    constexpr int I[k][43] {
        {-12,-12,-12,-10,-10,-10, -8, -8, -8, -6, -5, -5, -5, -4, -3, -3, -3, -3, -2, -2, -2, -1, -1, -1,  0,  0,  1,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-10,-10, -8, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -3, -3, -2, -2, -2, -1, -1,  0,  0,  1,  1,  2,  3,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-12,-10,-10,-10, -8, -8, -8, -6, -5, -5, -5, -4, -4, -3, -3, -2, -2, -2, -1, -1, -1,  0,  0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  8,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-10,-10,-10, -8, -8, -8, -8, -6, -6, -5, -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -1, -1, -1,  0,  0,  1,  1,  3,  0,  0,  0,  0,  0},
        {-12,-12,-10,-10,-10,-10,-10, -8, -8, -8, -6, -5, -4, -4, -3, -3, -3, -2, -2, -2, -2, -1,  0,  0,  1,  1,  1,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  3,  4,  5,  5,  6,  7,  7, 10, 12, 12, 12, 14, 14, 14, 14, 14, 16, 16, 18, 18, 20, 20, 20, 22, 24, 24, 28, 32,  0},
        {-12,-12,-12,-12,-12,-12,-10,-10,-10, -8, -8, -8, -8, -6, -6, -5, -5, -4, -3, -2, -2, -2, -2, -1, -1, -1,  0,  0,  0,  1,  1,  1,  3,  5,  6,  8, 10, 10,  0,  0,  0,  0,  0},
        {-12,-12,-10,-10,-10,-10,-10,-10, -8, -8, -8, -8, -8, -6, -6, -6, -5, -5, -5, -4, -4, -3, -3, -2, -1, -1,  0,  1,  1,  0,  0,  0,  0  ,0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  0,  0,  1,  1,  1,  1,  2,  3,  3,  4,  4,  4,  5,  5,  5,  7,  7,  8,  8, 10, 12, 12, 12, 14, 14, 14, 14, 18, 18, 18, 18, 18, 20, 20, 22, 24, 24, 32, 32, 36, 36,  0},
        {  0,  0,  0,  1,  1,  1,  2,  2,  3,  4,  4,  5,  5,  5,  6, 10, 12, 12, 14, 14, 14, 16, 18, 20, 20, 24, 24, 28, 28,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { -2, -2, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  5,  5,  5,  6,  6,  6,  6,  8, 10, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-12,-12,-12,-10,-10, -8, -8, -8, -8, -8, -8, -8, -6, -5, -5, -4, -4, -3, -3, -3, -3, -2, -2, -2, -1, -1, -1,  0,  0,  0, 0,   1,  1,  2,  4,  5,  5,  6, 10, 10, 14},
        {  0,  3,  8, 20,  1,  3,  4,  5,  1,  6,  2,  4, 14,  2,  5,  3,  0,  1,  1,  1, 28,  2, 16,  0,  5,  0,  3,  4, 12, 16,  1,  8, 14,  0,  2,  3,  4,  8, 14, 24,  0,  0,  0},
        {  0,  3,  4,  6,  7, 10, 12, 14, 18,  0,  3,  5,  6,  8, 12,  0,  3,  7, 12,  2,  3,  4,  2,  4,  7,  4,  3,  5,  6,  0,  0,  3,  1,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0},
        {  0,  0,  0,  2,  3,  4,  4,  4,  4,  4,  5,  5,  6,  7,  8,  8,  8, 10, 10, 14, 14, 20, 20, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  0,  0,  0,  1,  2,  3,  3,  4,  6,  7,  7,  8, 10, 12, 12, 12, 14, 14, 14, 16, 18, 20, 22, 24, 24, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-10,-10,-10,-10, -8, -6, -5, -5, -4, -4, -3, -2, -2, -2, -2, -1, -1, -1,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { -8, -8, -3, -3, -3, -3, -3,  0,  0,  0,  0,  3,  3,  8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 12, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-12,-10, -8, -6, -5, -5, -4, -4, -3, -3, -2, -1, -1, -1,  0,  0,  0,  0,  1,  1,  3,  3,  3,  4,  4,  4,  5, 14,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  0,  0,  0,  1,  1,  2,  2,  2,  3,  3,  4,  4,  7,  7,  7,  7,  7, 10, 10, 10, 10, 10, 18, 20, 22, 22, 24, 28, 32, 32, 32, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {-12,-10,-10,-10, -8, -8, -8, -6, -6, -5, -5, -5, -3, -1, -1, -1, -1,  0,  0,  1,  2,  2,  3,  5,  5,  5,  6,  6,  8,  8, 10, 12, 12, 12, 14, 14, 14, 14,  0,  0,  0,  0,  0},
        {-10, -8, -6, -6, -6, -6, -6, -6, -5, -5, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -2, -2, -1, -1,  0,  0,  0,  1,  1,  3,  4,  4,  4,  5,  8, 10, 12, 14,  0,  0,  0,  0},
        {-12,-12,-10,-10, -8, -8, -8, -6, -6, -6, -6, -5, -4, -4, -3, -3, -2, -2, -1, -1,- 1,  0,  0,  1,  2,  2,  3,  3,  5,  5,  5,  8,  8, 10, 10,  0,  0,  0,  0,  0,  0,  0,  0},
        { -8, -6, -5, -4, -4, -4, -3, -3, -1,  0,  0, 0,   1,  1,  2,  3,  3,  3,  4,  5,  5,  5,  6,  8,  8,  8,  8, 10, 12, 12, 12, 12, 14, 14, 14, 14,  0,  0,  0,  0,  0,  0,  0},
        {  0,  0,  0,  0,  1,  2,  2,  2,  2,  3,  3,  3,  4,  4,  5,  5,  8,  8, 10, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { -8, -6, -5, -5, -4, -4, -4, -3, -3, -3, -2, -1,  0,  1,  2,  3,  3,  6,  6,  6,  6,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
    };
    constexpr int J[k][43] {
        {  5, 10, 12,  5, 10, 12,  5,  8, 10,  1,  1,  5, 10,  8,  0,  1,  3,  6,  0,  2,  3,  0,  1,  2,  0,  1,  0,  2,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 10, 12,  8, 14,  8,  5,  6,  8,  5,  8, 10,  2,  4,  5,  0,  1,  2,  3,  5,  0,  2,  5,  0,  2,  0,  1,  0,  2,  0,  2,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  6,  8, 10,  6,  8, 10,  5,  6,  7,  8,  1,  4,  7,  2,  8,  0,  3,  0,  4,  5,  0,  1,  2,  0,  1,  2,  0,  2,  0,  1,  3,  7,  0,  7,  1,  0,  0,  0,  0,  0,  0,  0,  0},
        {  4,  6,  7, 10, 12, 16,  0,  2,  4,  6,  8, 10, 14,  3,  7,  8, 10,  6,  8,  1,  2,  5,  7,  0,  1,  7,  2,  4,  0,  1,  0,  1,  5,  0,  2,  0,  6,  0,  0,  0,  0,  0,  0},
        { 14, 16,  3,  6, 10, 14, 16,  7,  8, 10,  6,  6,  2,  4,  2,  6,  7,  0,  1,  3,  4,  0,  0,  1,  0,  4,  6,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { -3, -2, -1,  0,  1,  2, -1,  1,  2,  3,  0,  1, -5, -2,  0, -3, -8,  1, -6, -4,  1, -6,-10, -8, -4,-12,-10, -8, -6, -4,-10, -8,-12,-10,-12,-10, -6,-12,-12, -4,-12,-12,  0},
        {  7, 12, 14, 18, 22, 24, 14, 20, 24,  7,  8, 10, 12,  8, 22,  7, 20, 22,  7,  3,  5, 14, 24,  2,  8, 18,  0,  1,  2,  0,  1,  3, 24, 22, 12,  3,  0,  6,  0,  0,  0,  0,  0},
        {  8, 12,  4,  6,  8, 10, 14, 16,  0,  1,  6,  7,  8,  4,  6,  8,  2,  3,  4,  2,  4,  1,  2,  0,  0,  2,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  1, 10, -4, -2, -1,  0,  0, -5,  0, -3, -2, -1, -6, -1, 12, -4, -3, -6, 10, -8,-12, -6, -4,-10, -8, -4,  5,-12,-10, -8, -6,  2,-12,-10,-12,-12, -8,-10, -5,-10, -8,  0},
        { -1,  0,  1, -2, -1,  1, -1,  1, -2, -2,  2, -3, -2,  0,  3, -6, -8, -3,-10, -8, -5,-10,-12,-12,-10,-12, -6,-12, -5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 10, 12, -5,  6,-12, -6, -2, -1,  0,  1,  2,  3, 14, -3, -2,  0,  1,  2, -8, -6, -3, -2,  0,  4,-12, -6, -3,-12,-10, -8, -5,-12,-12,-10,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 14, 16, 18, 20, 22, 14, 24,  6, 10, 12, 14, 18, 24, 36,  8,  4,  5,  7, 16,  1,  3, 18, 20,  2,  3, 10,  0,  1,  3,  0,  1,  2, 12,  0, 16,  1,  0,  0,  1, 14,  4, 12, 10},
        {  0,  0,  0,  2,  5,  5,  5,  5,  6,  6,  7,  8,  8, 10, 10, 12, 14, 14, 18, 20, 20, 22, 22, 24, 24, 28, 28, 28, 28, 28, 32, 32, 32, 36, 36, 36, 36, 36, 36, 36,  0,  0,  0},
        {-12,-12,-12,-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-10,-10, -8, -8, -8, -8, -6, -6, -6, -5, -5, -5, -4, -3, -3, -3, -2, -1, -1,  0,  1,  1,  2,  4,  5,  6,  0,  0,  0,  0},
        {-12, -4, -1, -1,-10,-12, -8, -5, -4, -1, -4, -3, -8,-12,-10, -8, -4,-12, -8,-12, -8,-12,-10,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { -1,  0,  1,  2,  1, -1, -3,  0, -2, -2, -5, -4, -2, -3,-12, -6, -5,-10, -8, -3, -8, -8,-10,-10,-12, -8,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 10, 12,  6,  7,  8, 10,  8,  6,  2,  5,  3,  4,  3,  0,  1,  2,  4,  0,  1,  2,  0,  0,  1,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  6, 14, -3,  3,  4,  5,  8, -1,  0,  1,  5, -6, -2,-12,-10, -8, -5,-12,-10, -8, -6, -5, -4, -3, -2,-12,-12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 20, 24, 22, 14, 36,  8, 16,  6, 32,  3,  8,  4,  1,  2,  3,  0,  1,  4, 28,  0, 32,  0,  1,  2,  3, 18, 24,  4, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  0,  1,  4, 12,  0, 10,  0,  6, 14,  3,  8,  0, 10,  3,  4,  7, 20, 36, 10, 12, 14, 16, 22, 18, 32, 22, 36, 24, 28, 22, 32, 36, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        { 14, 10, 12, 14, 10, 12, 14,  8, 12,  4,  8, 12,  2, -1,  1, 12, 14, -3,  1, -2,  5, 10, -5, -4,  2,  3, -5,  2, -8,  8, -4,-12, -4,  4,-12,-10, -6,  6,  0,  0,  0,  0,  0},
        { -8,-12,-12, -3,  5,  6,  8, 10,  1,  2,  6,  8, 10, 14,-12,-10, -6, 10, -3, 10, 12,  2,  4, -2,  0, -2,  6, 10,-12,-10,  3, -6,  3, 10,  2,-12, -2, -3,  1,  0,  0,  0,  0},
        {  8, 14, -1,  8,  6,  8, 14, -4, -3,  2,  8,-10, -1,  3,-10,  3,  1,  2, -8, -4,  1,-12,  1, -1, -1,  2,-12, -5,-10, -8, -6,-12,-10,-12, -8,  0,  0,  0,  0,  0,  0,  0,  0},
        { 14, 10, 10,  1,  2, 14, -2, 12,  5,  0,  4, 10,-10, -1,  6,-12,  0,  8,  3, -6, -2,  1,  1, -6, -3,  1,  8, -8,-10, -8, -5, -4,-12,-10, -8, -6,  0,  0,  0,  0,  0,  0,  0},
        { -3,  1,  5,  8,  8, -4, -1,  4,  5, -8,  4,  8, -6,  6, -2,  1, -8, -2, -5, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {  3,  6,  6,  8,  5,  6,  8, -2,  5,  6,  2, -6,  3,  1,  6, -6, -2, -6, -5, -4, -1, -8, -4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0}
    };
    constexpr double n[k][43] {
        { 1.108795588238530e-03, 5.726167408106160e+02,-7.670519483808520e+04,-2.533210695296740e-02, 6.280080493456890e+03, 2.341056541318760e+05, 2.168678260458560e-01,-1.562379043419630e+02,-2.698939561766130e+04,-1.804071000855050e-04, 1.167322276682610e-03, 2.669870408560400e+01, 2.827766172432860e+04,-2.424315200295230e+03, 4.352173230227330e-04,-1.224948313874410e-02, 1.793576040199890e+00, 4.427295210583140e+01,-5.932234890183420e-03, 4.531862616857740e-01, 1.358257031291400e+00, 4.087484158567450e-02, 4.746863978633120e-01, 1.186468149979150e+00, 5.469872657275490e-01, 1.952667704526430e-01,-5.022687908696630e-02,-3.696453081933770e-01, 6.338280375284200e-03, 7.974417939010170e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-8.276704700036210e-02, 4.168871260105650e+01, 4.836519821970590e-02,-2.910320849502760e+04,-1.114225822369480e+02,-2.023000839040140e-02, 2.940025093385150e+02, 1.402449976096580e+02,-3.443841588114590e+02, 3.611824526121490e+02,-1.406996774207380e+03,-2.020239026764810e-03, 1.713467924574710e+02,-4.255978040586320e+00, 6.913460850003340e-06, 1.511405096789250e-03,-4.163752901662360e-02,-4.137549570110420e+01,-5.066732957216370e+01,-5.722129655690230e-04, 6.088173684017850e+00, 2.396006602561610e+01, 1.222614799253840e-02, 2.163560576929380e+00, 3.981989033686420e-01,-1.168928278340850e-01,-1.028459193735320e-01,-4.926766375892840e-01, 6.555404564067900e-02,-2.404625350785300e-01,-2.697981803100750e-02, 1.283694359670120e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 3.119677887630300e+00, 2.767134588475640e+04, 3.225831034032690e+07,-3.424160650953630e+02,-8.997325299073770e+05,-7.938920498212510e+07, 9.531930032173879e+01, 2.297847423450720e+03, 1.753366753224990e+05, 7.912143652227920e+06, 3.199333458442090e-05,-6.595088635557670e+01,-8.334265632128509e+05, 6.457346805832920e-02,-3.820310205708130e+06, 4.063988484700790e-05, 3.103274984920080e+01,-8.929967184837240e-04, 2.346048915916160e+02, 3.775156689669510e+03, 1.586468125913610e-02, 7.079063362418430e-01, 1.260162251465700e+01, 7.361436557721520e-01, 6.765442689991010e-01,-1.781005881891370e+01,-1.565319755317130e-01, 1.177074300481580e+01, 8.401436538604470e-02,-1.864424674719490e-01,-4.401702039496450e+01, 1.232904235024940e+06,-2.406500397308450e-02,-1.070777166608690e+06, 4.383198585664750e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-4.524848471716450e-10, 3.152103895388010e-05,-2.149913520475450e-03, 5.080588748083450e+02,-1.271230368459320e+07, 1.153711331204970e+12,-1.978057287762730e-16, 2.415548060339720e-11,-1.564817036405250e-06, 2.772113468366250e-03,-2.035789944622860e+01, 1.443694899090530e+06,-4.112542179465390e+10, 6.234497862437730e-06,-2.217742811460380e+01,-6.893150879331581e+04,-1.954195250607130e+07, 3.163735105640150e+03, 2.240407544269880e+06,-4.367013479223560e-06,-4.042138528339960e-04,-3.481532034146630e+02,-3.852942135552890e+05, 1.352037000994030e-07, 1.346483832710890e-04, 1.250318353517360e+05, 9.681236784558410e-02, 2.256605175124380e+02,-1.901024353418720e-04,-2.996284108192290e-02, 5.008339153721210e-03, 3.878424829984110e-01,-1.385353677771820e+03, 8.707452459717731e-01, 1.719462520687420e+00,-3.266501214263830e-02, 4.980441717278770e+03, 5.514780227650870e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 7.158158084047210e+08,-1.143283607534490e+11, 3.765310020157200e-12,-9.039836686911570e-05, 6.656959088362521e+05, 5.353641749601270e+09, 7.949774023356030e+10, 9.222305634214371e+01,-1.425860739912150e+05,-1.117963814241620e+06, 8.961216296407600e+03,-6.699892390704910e+03, 4.512425384868340e-03,-3.397313259777130e+01,-1.205231115522780e+00, 4.759926677171240e+04,-2.666277503903410e+05,-1.533149543865240e-04, 3.056384048282650e-01, 1.236549994994860e+02,-1.043907942130110e+03,-1.574965161743080e-02, 6.853311189402530e-01, 1.783734628739030e+00,-5.446741248789100e-01, 2.045299313188430e+03,-2.283423593287520e+04, 4.131974815158990e-01,-3.419318359104050e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-2.517565477923250e-08, 6.013071936687630e-06,-1.006159774500490e-03, 9.999691402521920e-01, 2.141077592364860e+00,-1.651755719590860e+01,-1.419873036387270e-03, 2.692519151565540e+00, 3.497418158587220e+01,-3.002086957717830e+01,-1.315462882525390e+00,-8.390912772861689e+00, 1.815456083370150e-10,-5.910992064789090e-04, 1.521150670871060e+00, 2.529564706632250e-05, 1.007262652037860e-15,-1.497745338606500e+00,-7.939409705629690e-10,-1.502908912647170e-04, 1.512055312751330e+00, 4.709426062216520e-06, 1.950497103917120e-13,-9.116278862660769e-09, 6.043746402012650e-04,-2.251329339001360e-16, 6.109169735829810e-12,-3.030639080434040e-07,-1.377960707984090e-05,-9.192967366661060e-04, 6.392882231325450e-10, 7.532594798986990e-07,-4.003214786829290e-13, 7.561402943516141e-09,-9.120820540348909e-12,-2.376123811405390e-08, 2.695860105918740e-05,-7.328281351578390e-11, 2.419955783066600e-10,-4.057355327303220e-04, 1.894241434980110e-10,-4.866329650745630e-10, 0.000000000000000e+00},
        { 4.122090206529960e-05,-1.149872382805870e+06, 9.481808850320801e+09,-1.957888657189710e+17, 4.962507048713000e+24,-1.055498845484960e+28,-7.586421659882780e+11,-9.221727695961009e+22, 7.253790720593480e+29,-6.177182492058590e+01, 1.075550333448580e+04,-3.795458023364870e+07, 2.286468462218310e+11,-4.997410930106190e+06,-2.802143100541010e+30, 1.049154067695860e+06, 6.137542291686190e+27, 8.020567155283780e+31,-2.986178198280650e+07,-9.107825401346810e+01, 1.350332272815650e+05,-7.129493834082110e+18,-1.045787852895420e+36, 3.043315844440930e+01, 5.932507979594450e+09,-3.641740621107980e+27, 9.217914035324610e-01,-3.376936096574710e-01,-7.246441437585079e+01,-1.104802392726010e-01, 5.365160318750590e+00,-2.914418721562050e+03, 6.163381765353050e+39,-1.208891758611800e+38, 8.183960245246120e+22, 9.407819448358290e+08,-3.672796695454480e+04,-8.375139317986550e+15, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 5.613796788875770e-02, 7.741354215870830e+09, 1.114829758779380e-09,-1.439871282081830e-03, 1.936965587649200e+03,-6.059718235850050e+08, 1.719515681243370e+13,-1.854611549851450e+16, 3.878511680780100e-17,-3.954643278461050e-14,-1.708759356790230e+02,-2.120106207012200e+03, 1.776833373481910e+07, 1.101774436295750e+01,-2.343960916933130e+05,-6.561744219995940e+06, 1.563622129773960e-05,-2.129462570214000e+00, 1.352493063748580e+01, 1.771891641458130e-01, 1.394991673454640e+03,-7.036709320363880e-03,-1.520110443896480e-01, 9.819169229911130e-05, 1.471996586180760e-03, 2.026184870255780e+01, 8.993455189442400e-01,-2.113464022408580e-01, 2.499717529574910e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 1.069056843591360e+00,-1.486208579223330e+00, 2.598622569804080e+14,-4.463520556787490e-12,-5.666207571700320e-07,-2.353028857368490e-03,-2.692263219688390e-01, 9.220249929443920e+00, 3.576335055037720e-12,-1.739425655622220e+01, 7.006817855562290e-06,-2.670503510757680e-04,-2.317796696756240e+00,-7.535330469797520e-13, 4.813371314528910e+00,-2.232862704223560e+21,-1.187460049873830e-05, 6.464129341364960e-03,-4.105885363309370e-10, 4.227395370572410e+19, 3.136981804738120e-13, 1.643953343450400e-24,-3.398233237543730e-06,-1.352686399050210e-02,-7.232525142116250e-15, 1.843864375383660e-09,-4.639595337523850e-02,-9.922631003767500e+13, 6.881691544393350e-17,-2.226209984521970e-11,-5.408430186240830e-08, 3.455706062002570e-03, 4.222758003040860e+10,-1.269744787704870e-15, 9.272379851536790e-10, 6.126708120164890e-14,-7.226939240634970e-12,-3.836695026368220e-04, 3.746845724102040e-04,-9.319768975110860e+04,-2.476906160269220e-02, 6.581105467594740e+01, 0.000000000000000e+00},
        {-1.113713173955400e-04, 1.003428924236850e+00, 5.306155819289790e+00, 1.790587600787920e-06,-7.285419584647740e-04,-1.875761333717040e+01, 1.990608740718490e-03, 2.435747553772900e+01,-1.770407854994440e-04,-2.596803852271300e-03,-1.987045784068230e+02, 7.386277902242870e-05,-2.362646928441380e-03,-1.610231213143330e+00, 6.223229717864730e+03,-9.607541167016689e-09,-5.105722697204880e-11, 7.673737814042110e-03, 6.638554694852540e-15,-7.175907355267450e-10, 1.465645429265080e-05, 3.090294742770130e-12,-4.642163009717080e-16,-3.904996379611610e-14,-2.367161267814310e-10, 4.546528542687170e-12,-4.222717874824970e-03, 2.839117423547060e-11, 2.709290027202280e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-4.012156995760990e+08, 4.845014783184060e+10, 3.947214713636780e-15, 3.726299673741470e+04,-3.697943741686660e-30,-3.804364070124520e-15, 4.753616299702330e-07,-8.791489161407060e-04, 8.443178638443311e-01, 1.224331626566000e+01,-1.045296348302790e+02, 5.897027712774290e+02,-2.910268511644440e+13, 1.703430728418500e-06,-2.776176069757480e-04,-3.447096054866860e+00, 2.213338624470950e+01,-1.946461100370790e+02, 8.083546397728250e-16,-1.808452091454700e-11,-6.966641581324120e-06,-1.810575603009940e-03, 2.558302985790270e+00, 3.289138736584810e+03,-1.732702412499040e-19,-6.618767925580340e-07,-3.956889234212500e-03, 6.042032998191320e-18,-4.008799359205170e-14, 1.607511074649580e-09, 3.837194090255560e-05,-6.495654467024570e-15,-1.490953285060000e-12, 5.414493773295810e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 2.607020586475370e+09,-1.882772136047040e+14, 5.549238702896670e+18,-7.589669463877581e+22, 4.138651868489080e+26,-8.150380007380601e+11,-3.814582604899550e+32,-1.232395646005190e-02, 2.260956314371740e+07,-4.950178095067200e+11, 5.294829964228630e+15,-4.443594787462950e+22, 5.216358645273150e+34,-4.870956727407420e+54,-7.144302099375470e+05, 1.278686346154950e-01,-1.007521279175980e+01, 7.774514379609900e+06,-1.081054807964710e+24,-3.575785811696590e-06,-2.128571694234840e+00, 2.707061110852380e+29,-6.959536223488290e+32, 1.106090274722800e-01, 7.215591633613541e+01,-3.063673075322190e+14, 2.658396188855300e-05, 2.533923928897540e-02,-2.144430418365790e+02, 9.378466014896670e-01, 2.231840431017000e+00, 3.384012225091910e+01, 4.942372371797180e+20,-1.980684041544280e-01,-1.414153498811400e+30,-9.938624216136510e+01, 1.250705341427310e+02,-9.964735290044390e+02, 4.731379098727650e+04, 1.166621212193220e+32,-3.158749762715330e+15,-4.457033691969450e+32, 6.427949323736940e+32},
        { 8.113843634818469e-01,-5.681993109900940e+03,-1.786571981725560e+10, 7.955376576134270e+31,-8.145682093468720e+04,-6.597745676028740e+07,-1.528611486593020e+10,-5.601656675104460e+11, 4.583848285939490e+05,-3.857540003838480e+13, 4.537358000042730e+07, 9.394549357355630e+11, 2.665728564329380e+27,-5.475783138990970e+09, 2.007257011123860e+14, 1.850072455632390e+12, 1.851354468283370e+08,-1.704510900763850e+11, 1.578903660376140e+14,-2.025305097487740e+15, 3.681939261835700e+59, 1.702155394589360e+17, 6.392349099187410e+41,-8.216981607219560e+14,-7.952602418723061e+23, 2.334158694785100e+17,-6.000799345868030e+22, 5.945843822733840e+24, 1.894612793494920e+39,-8.100934288426449e+45, 1.888139110768090e+21, 1.110522440987680e+35, 2.911339586025030e+45,-3.294219239514600e+21,-1.375702825366960e+25, 1.815089963039020e+27,-3.468651227683530e+29,-2.119611487742600e+37,-1.286178998876750e+48, 4.798178956992390e+64, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 2.809677999431510e-39, 6.148690065736090e-31, 5.822386670489420e-28, 3.906283692384620e-23, 8.214457582551190e-21, 4.021379618427760e-15, 6.517181718783010e-13,-2.117733558030580e-08, 2.649533543800720e-03,-1.350314464513310e-32,-6.072466439708930e-24,-4.023521152344940e-19,-7.449385069255440e-17, 1.899172065262370e-13, 3.649751835084730e-06, 1.772748723619460e-26,-3.349527588129990e-19,-4.215377260983890e-09,-3.910481679296490e-02, 5.412769115641760e-14, 7.054121007736990e-12, 2.585858878974860e-09,-4.931113620301620e-11,-1.586496998945430e-06,-5.250374278861000e-01, 2.200199017296150e-03,-6.430641326369250e-03, 6.291541490150480e+01, 1.351473186170610e+02, 2.405608083217130e-07,-8.907633067013050e-04,-4.402095994077140e+03,-3.028071077477760e+02, 1.591587483145990e+03, 2.325342727098760e+05,-7.926812071326000e+05,-8.698713646627690e+10, 3.545427691856710e+11, 4.008492401293290e+14, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 1.287460239797180e-35,-7.352347703823420e-12, 2.890786921491500e-03, 2.444827319072230e-01, 1.417334920309850e-24,-3.545338530594760e-29,-5.945392029014310e-18,-5.851884017827790e-09, 2.013773254118030e-06, 1.386473882093060e+00,-1.739593650847720e-05, 1.376808783493690e-03, 8.148976058055130e-15, 4.255966313518390e-26,-3.874491137877550e-18, 1.398147479302400e-13,-1.718496389515210e-03, 6.418905295132960e-22, 1.189605780720180e-11,-1.552827625716110e-18, 2.339079073475070e-08,-1.740932477662130e-13, 3.776826490891490e-09,-5.167202365753020e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-9.828253420103660e-05, 1.051457008506120e+00, 1.160330940950840e+02, 3.246647502815430e+03,-1.235923486101370e+03,-5.614034500134950e-02, 8.566774016408690e-08, 2.363134253939240e+02, 9.725032923501090e-03,-1.030019945319270e+00,-1.496537061991620e-09,-2.157437788615920e-05,-8.344521982914451e+00, 5.866026605649880e-01, 3.434800221049680e-26, 8.162560959470211e-06, 2.949856979167980e-03, 7.117304662765839e-17, 4.009547638069410e-10, 1.077660270328530e+01,-4.094495991381820e-07,-7.291213077589020e-06, 6.771079709389090e-09, 6.027459730229751e-08,-3.823230118552570e-11, 1.799466283174370e-03,-3.450428346400050e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-8.204338432599499e+04, 4.732715184615860e+10,-8.059500210054130e-02, 3.286000254359800e+01,-3.566170299824900e+03,-1.729857814333350e+09, 3.517692327291920e+07,-7.754892599851440e+05, 7.103466919660180e-05, 9.934998838202740e+04,-6.420941719045700e-01,-6.128428168200830e+03, 2.328084729837760e+02,-1.428082204168370e-05,-6.435960606784560e-03,-4.285772274756140e+00, 2.256899391619180e+03, 1.003556517215100e-03, 3.334914551435160e-01, 1.096975768888730e+00, 9.619173793764521e-01,-8.381656322045980e-02, 2.477959084114920e+00,-3.191149690065330e+03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 1.441659556608630e-03,-7.014385996282580e+12,-8.309467164592190e-17, 2.619751353681090e-01, 3.930972147062450e+02,-1.043340306540210e+04, 4.901126541542110e+08,-1.471042227720690e-04, 1.036027480434080e+00, 3.053088900650890e+00,-3.997452769712640e+06, 5.692337195937500e-12,-4.649235044077780e-02,-5.354003965129060e-18, 3.999887956931620e-13,-5.364795602018110e-07, 1.595367224112020e-02, 2.703032488602170e-15, 2.442474538585060e-08,-9.834306367164540e-06, 6.635131442244541e-02,-9.934569578450059e+00, 5.464913235284910e+02,-1.433654063937580e+04, 1.507649741255110e+05,-3.372097093401050e-10, 3.775019800254690e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-5.324666121402540e+22, 1.004154800008240e+31,-1.915400018213670e+29, 1.056183778088470e+16, 2.022818844770610e+58, 8.845854725961339e+07, 1.665401816383630e+22,-3.135631976691110e+05,-1.856623275453240e+53,-6.249420939189420e-02,-5.041607241325900e+09, 1.875144918330920e+04, 1.213999799932170e-03, 1.883170430494550e+00,-1.670735039620600e+03, 9.659616505997750e-01, 2.948856968024880e+00,-6.539156273461150e+04, 6.040122001634440e+49,-1.983393585579370e-01,-1.759840901635010e+57, 3.563148814039870e+00,-5.759912551443840e+02, 4.562134153380710e+04,-1.091740449878290e+07, 4.377960999751340e+33,-6.165526111357920e+45, 1.935687689177970e+09, 9.508981704250420e+53, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 1.552872495862680e+00, 6.642351150090310e+00,-2.893662367272100e+03,-3.859232023098480e+12,-2.910029157837610e+00,-8.290882468580830e+11, 1.768148996752180e+00,-5.346866957134690e+08, 1.604646086878340e+17, 1.964353665601860e+05, 1.566374275417290e+12,-1.781545602600060e+00,-2.297462376236920e+15, 3.856590016480060e+07, 1.105544467905430e+09,-6.770738306873490e+13,-3.279105920865230e+30,-3.415520408606440e+50,-5.272513397090470e+20, 2.453756409370550e+23,-1.687766172092690e+26, 3.589589558675780e+28,-6.564752803394110e+35, 3.552860455123010e+38, 5.690214544132700e+57,-7.005845464331130e+47,-7.057726233263740e+64, 1.668611762001480e+52,-3.004751296804860e+60,-6.684812951968080e+50, 4.284323386206780e+68,-4.442273677583040e+71,-2.813960135627450e+76, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 1.220883492583550e+17, 1.042164686084880e+09,-8.826669315646520e+15, 2.599295108494990e+19, 2.226127791422110e+14,-8.784735850500850e+17,-3.144325775515520e+21,-2.169349169962850e+12, 1.590796481968490e+20,-3.395676173034230e+02, 8.843876513378359e+12,-8.434059268464180e+20, 1.141781935180220e+01,-1.227082292356410e-04,-1.062016717671070e+02, 9.034432139593130e+24,-6.939962703708520e+27, 6.489167189655750e-09, 7.189575671278510e+03, 1.055817453461870e-03,-6.519032036025810e+14,-1.601168132746760e+24,-5.102542942378370e-09,-1.523553889534020e-01, 6.771432922901440e+11, 2.763784383789300e+14, 1.168629831416860e-02,-3.014269479801710e+13, 1.697198138848400e-08, 1.046748400209290e+26,-1.080169045601400e+04,-9.906236019342949e-13, 5.361164836027380e+06, 2.261459637478810e+21,-4.887315657762100e-10, 1.510015488806700e-05,-2.277004646439200e+04,-7.817545076988460e+27, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-4.156528120615910e-55, 1.774417429240430e-61,-3.570786682033770e-55, 3.592522136041140e-26,-2.591237363802690e+01, 5.946197661934600e+04,-6.241840071031580e+10, 3.130802999159440e+16, 1.050064461920360e-09,-1.928243369848520e-06, 6.541443737499370e+05, 5.131174628650440e+12,-6.975957503473910e+18,-1.039771844547670e+28, 1.195631355406660e-48,-4.366770340516550e-42, 9.269900365306390e-30, 5.877931056207480e+20, 2.803757250947310e-18,-1.923599724406340e+22, 7.427057233027380e+26,-5.174296824506050e+01, 8.206120486454690e+06,-1.882148823414480e-09, 1.845872611148370e-02,-1.358304077826630e-06,-7.236818856263480e+16,-2.234491940541240e+26,-1.115267418264310e-35, 2.760326011451510e-29, 1.348564915678530e+14, 6.524402933458600e-10, 5.106551197743600e+16,-4.681383589087320e+31,-7.606674911832790e+15,-4.172479869868210e-19, 3.125456777561040e+13,-1.003753338641860e+14, 2.477613923290580e+26, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-5.862191338170160e-08,-8.944603550055260e+10, 5.311680375197740e-31, 1.098924023292390e-01,-5.753683894252120e-02, 2.282768539902490e+04,-1.585486096550020e+18, 3.298657485765030e-28,-6.349879811906690e-25, 6.157620686406110e-09,-9.611092409857470e+07,-4.062742866526250e-45,-4.711037254980770e-13, 7.259377248281450e-01, 1.877685257636820e-39,-1.033084363237710e+03,-6.625528163421680e-02, 5.795140417657100e+02, 2.374167326166440e-27, 2.717002357398930e-15,-9.078862134836000e+01,-1.712425095702070e-37, 1.567920678546210e+02, 9.232613579014700e-01,-5.978659884225770e+00, 3.219887676363890e+06,-3.994413900422030e-30, 4.934290860469810e-08, 8.120369833705650e-20,-2.076102846541370e-12,-3.408212914197190e-07, 5.420005733722330e-18,-8.567115865102140e-13, 2.661704544059810e-14, 8.581337918570990e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 3.773737412981510e+18,-5.071008837229130e+12,-1.033632255988600e+15, 1.847908143207730e-06,-9.247293783909450e-04,-4.259995622927380e+23,-4.623077718739730e-13, 1.073190658557670e+21, 6.486624922806820e+10, 2.442006006882810e+00,-8.515357334842580e+09, 1.698944814335920e+21, 2.157802225090200e-27,-3.208505513673340e-01,-3.826424484586100e+16,-2.753860776744210e-29,-5.631992533916660e+05,-3.260686462793140e+20, 3.979490015531840e+13, 1.008240085847570e-07, 1.622345697384330e+04,-4.323552253197450e+10,-5.928742455986100e+11, 1.330616472811060e+00, 1.573381977975440e+06, 2.581896142708530e+13, 2.624132097063580e+24,-9.200119374311420e-02, 2.202137659054260e-03,-1.104337591095470e+01, 8.470048706120869e+06,-5.929106957625360e+08,-1.830271732696600e-05, 1.813396035163020e-01,-1.192287596698890e+03, 4.308676580614680e+06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        {-5.255979950246330e-10, 5.834413052284070e+03,-1.347789684579250e+16, 1.189735009342120e+25,-1.590964909047080e+26,-3.158399023020210e-07, 4.962121971582390e+02, 3.277772272731710e+18,-5.271146578506960e+21, 2.100175062818630e-17, 7.051062243998340e+20,-2.667131361064690e+30,-1.453705125545620e-08, 1.493339170531300e+27,-1.497956202876410e+07,-3.818819062711000e+15, 7.246601655857970e-05,-9.378081695501930e+13, 5.144114683763830e+09,-8.281985940401410e+04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
        { 2.440078922906500e-11,-4.630574303312420e+06, 7.288032747777120e+09, 3.277763028588560e+15,-1.105981701184090e+09,-3.238999157299570e+12, 9.238140070232450e+15, 8.422500804137120e-13, 6.632214362455060e+11,-1.671701866721390e+14, 2.537493587013910e+03,-8.197315596105230e-21, 3.283805878906630e+11,-6.250047911715430e+07, 8.031979574620229e+20,-2.043970113383530e-11,-3.783910470559380e+03, 9.728765459386200e-03, 1.543557216814590e+01,-3.739628629286430e+03,-6.828590113745720e+10,-2.484880156145430e-04, 3.945360494970680e+06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00}
    };

    /**  Specific volume also vs id of one of 26 subregions */
    double v3Tpid(double T, double p, int id)
    {
        const double pi = p/px[id];
        const double theta = T/Tx[id];
        double z = 0;
        for (int i = 0; i < N[id]; i++)
        {
            z += n[id][i] * pow(
                pi - a[id], c[id] * I[id][i]
            ) * pow(theta - b[id], d[id] * J[id][i]);
        }
        if (id == 13)
          return vx[id] * exp(z);
        return vx[id] * pow(z, e[id]);
    }

    /**  Subregion boundaries */
    double T3ab(double p)
    {
        constexpr int N {5};
        constexpr int I[N] {0, 1, 2, -1, -2};
        constexpr double n[N] {
            0.154793642129415e4, -0.187661219490113e3, 0.213144632222113e2,
           -0.191887498864292e4, 0.918419702359447e3
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(log(p), I[i]);
        return theta;
    }

    double T3cd(double p)
    {
        constexpr int N {4};
        constexpr double n[N] {
          0.585276966696349e3, 0.278233532206915e1, -0.127283549295878e-1,
          0.159090746562729e-3
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    constexpr double T3ef(double p) { return 3.727888004 * (p - 22.064) + 647.096; }

    double T3gh(double p)
    {
       constexpr int N {5};
        constexpr double n[N] {
          -0.249284240900418e5, 0.428143584791546e4, -0.269029173140130e3,
          0.751608051114157e1, -0.787105249910383e-1
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3ij(double p)
    {
        constexpr int N {5};
        constexpr double n[N] {
            0.584814781649163e3, -0.616179320924617, 0.260763050899562,
            -0.587071076864459e-2, 0.515308185433082e-4
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3jk(double p)
    {
        constexpr int N {5};
        constexpr double n[N] {
            0.617229772068439e3  , -0.770600270141675e1, 0.697072596851896,
            -0.157391839848015e-1, 0.137897492684194e-3
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3mn(double p)
    {
        constexpr int N {4};
        constexpr double n[N] {
            0.535339483742384e3, 0.761978122720128e1, -0.158365725441648,
            0.192871054508108e-2
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3op(double p)
    {
      constexpr int N {5};
      constexpr int I[N] {0, 1, 2, -1, -2};
      constexpr double n[N] {
        0.969461372400213e3, -0.332500170441278e3, 0.642859598466067e2,
        0.773845935768222e3, -0.152313732937084e4
      };
      double theta = 0;
      for (int i = 0; i < N; i++)
        theta += n[i] * pow(log(p), I[i]);
      return theta;
    }

    double T3qu(double p)
    {
        constexpr int N {4};
        constexpr double n[N] {
            0.565603648239126e3, 0.529062258221222e1, -0.102020639611016,
            0.122240301070145e-2
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3rx(double p)
    {
        constexpr int N {4};
        constexpr double n[N] {
            0.584561202520006e3, -0.102961025163669e1, 0.243293362700452,
            -0.294905044740799e-2
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3uv(double p)
    {
        constexpr int N {4};
        constexpr double n[N] {
            0.528199646263062e3, 0.890579602135307e1, -0.222814134903755,
            0.286791682263697e-2
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(p, i);
        return theta;
    }

    double T3wx(double p)
    {
        constexpr int N {5};
        constexpr int I[N] {0, 1, 2, -1, -2};
        constexpr double n[N] {
            0.728052609145380e1, 0.973505869861952e2, 0.147370491183191e2,
            0.329196213998375e3, 0.873371668682417e3
        };
        double theta = 0;
        for (int i = 0; i < N; i++)
            theta += n[i] * pow(log(p), I[i]);
        return theta;
    }

    /** Search sub-region: return identifier 0-25 for sub-region a-z or -1 in
     case of search fail */
    int id3Tp(double T, double p)
    {
        /** Saturation pressures: */
        constexpr double psat643 = 21.04336732  ;  /// at 643.15 K, [MPa]
        constexpr double psat623 = 16.5291642526;  /// at 623.15 K, [MPa]
        constexpr double psat0264 = 21.93161551 ;  /// at 2.64e-3 m^3/kg, [MPa]
        constexpr double psat0385 = 21.90096265 ;  /// at 3.85e-3 m^3/kg, [MPa]

        constexpr double p3cd = 19.00881189173929;  /// [MPa]
        const double tsat = r797satline::Tp(p); /// saturation temperature, [K]
        int id = -1;  /// Error code if none of the following conditions are met
        double tcd, tab, tef, tgh, tij, tjk, tmn, top, tqu, trx, twx, tuv = 0;

        /** IAPWS SR5-05 Table 2 */
        if (40. < p && p < 100) {
            id = ( T <= T3ab(p) ? 0 : 1 );                        /// a : b
        } else if (25. < p && p <= 40) {
            tcd = T3cd(p);  tab = T3ab(p);  tef = T3ef(p);
            if (T <= tcd) id = 2;                                /// c
            else if (tcd < T && T <= tab) id = 3;                /// d
            else id = (tab < T && T <= tef ? 4 : 5);             /// e : f
        } else if (23.5 < p  && p <= 25) {
            tcd = T3cd(p);  tef = T3ef(p);  tgh = T3gh(p);
            tij = T3ij(p);  tjk = T3jk(p);
            if (T <= tcd) id = 2;                                /// c
            else if (tcd < T && T <= tgh) id = 6;                /// g
            else if (tgh < T && T <= tef) id = 7;                /// h
            else if (tef < T && T <= tij) id = 8;                /// i
            else id = (tij < T && T <= tjk ? 9 : 10);            /// j : k
        } else if (23 < p && p <= 23.5) {
            tcd = T3cd(p);  tef = T3ef(p);  tgh = T3gh(p);
            tij = T3ij(p);  tjk = T3jk(p);
            if (T <= tcd) id = 2;                                /// c
            else if (tcd < T && T <= tgh) id = 11;               /// l
            else if (tgh < T && T <= tef) id =  7;               /// h
            else if (tef < T && T <= tij) id =  8;               /// i
            else id = (tij < T && T <= tjk ? 9 : 10);            /// j : k
        } else if (22.5 < p && p <= 23) {
            tcd = T3cd(p); tef = T3ef(p); tgh = T3gh(p); tmn = T3mn(p);
            tij = T3ij(p); tjk = T3jk(p); top = T3op(p);
            if (T <= tcd) id = 2;                                /// c
            else if (tcd < T && T <= tgh) id = 11;               /// l
            else if (tgh < T && T <= tmn) id = 12;               /// m
            else if (tmn < T && T <= tef) id = 13;               /// n
            else if (tef < T && T <= top) id = 14;               /// o
            else if (top < T && T <= tij) id = 15;               /// p
            else id = (tij < T && T <= tjk ? 9 : 10);            /// j : k
        } else if (psat643 < p && p <= 22.5) {
            tcd = T3cd(p); tqu = T3qu(p); trx = T3rx(p); tjk = T3jk(p);
            if (T <= tcd) id = 2;                                /// c
            else if (tcd < T && T<= tqu) id = 16;                /// q
            else if (tqu < T && T <= trx){
                /// Table 10
                tef = T3ef(p);  twx = T3wx(p);  tuv = T3uv(p);
                if (22.11 < p && p <= 22.5){
                    if (T <= tuv) id = 20;                       /// u
                    else if (tuv <= T && T <= tef) id = 21;      /// v
                    else if (tef <= T && T <= twx) id = 22;      /// w
                    else id = 23;                                /// x
                } else if (22.064 < p && p <= 22.11) {
                    if (T <= tuv) id = 20;                       /// u
                    else if (tuv <= T && T <= tef) id = 24;      /// y
                    else if (tef <= T && T <= twx) id = 25;      /// z
                    else id = 23;                                /// x
                } else if (T > tsat) {
                   if (psat643 < p && p <= psat0385) id = 23;    /// x
                   else if (psat0385 < p && p <= 22.064)
                       id  =  (T <= twx ? 25 : 23);              /// z : x
                } else if (T <= tsat) {
                   if (psat643 < p && p <= psat0264) id = 20;    /// u
                   else if (psat0264 < p && p <= 22.064)
                      id = (T <= tuv ? 20 : 24);                 /// u, y
                }
            }
            else id  = (trx < T && T <= tjk ? 17 : 10);          /// r : k
        } else if (20.5 < p && p <= psat643){
            tcd = T3cd(p); tjk = T3jk(p);
            if (T <= tcd) id = 2;                               /// c
            else if (tcd < T && T <= tsat) id = 18;             /// s
            else id = (tsat < T && T <= tjk ? 17 : 10);         /// r : k
        } else if (p3cd < p && p <= 20.5) {
            tcd = T3cd(p);
            if (T <= tcd) id = 2;                               /// c
            else id = (tcd < T && T <= tsat ? 18 : 19);         /// s : t
        } else if (psat623 < p && p <= p3cd)
            id = (T <= tsat ? 2 : 19);                          /// c : t
        return id;
    }

    /**  Properties **/
    double v3Tp(double T, double p)
    {
      const int id  = id3Tp(T, p);
      if (id == -1) return -1.;  /// when no subregion of Region 3 is found
      return v3Tpid(T, p, id);
    }

    double u3Tp(double T, double p)
    {
       const double v = v3Tp(T, p);
       if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
       return r797tr3::u3Tr(T, 1/v);
    }

    double s3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::s3Tr(T, 1/v);
    }

    double h3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::h3Tr(T, 1/v);
    }

    double cp3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::cp3Tr(T, 1/v);
    }

    double cv3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::cv3Tr(T, 1/v);
    }

    double w3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::w3Tr(T, 1/v);
    }

    double e3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::e3Tr(T, 1/v);
    }

    double i3Tp(double T, double p)
    {
      const double v = v3Tp(T, p);
      if (v <= 0) return -1.;  /// when no subregion of Region 3 is found
      return r797tr3::i3Tr(T, 1/v);
    }
}


///  Region 4 of IAPWS R7-97(2012) is described in *wsif97satline.cpp*

/**  IAPWS R7-97(2012). Region5 **/
namespace r797tp5 {
    constexpr int N {6};
    constexpr int J0[N] {0,1,-3,-2,-1,2};
    constexpr double n0[N] {
        -13.179983674201  ,  6.8540841634434,  -0.024805148933466,
          0.36901534980333, -3.1161318213925,  -0.32961626538917
    };

    double g0(double pi, double tau)
    {
        double y = log(pi);
        for (int i = 0; i < N; i++)
            y += n0[i] * pow(tau, J0[i]);
        return y;
    }

    constexpr double g0p(double pi) { return 1/pi; }

    constexpr double g0pp(double pi) { return -1/pi/pi; }

    double g0t(double tau)
    {
        double y = 0;
        for (int i = 0; i < N; i++)
            y += n0[i] * J0[i] * pow(tau, J0[i] - 1);
        return y;
    }

    double g0tt(double tau)
    {
        double y = 0;
        for (int i = 0; i < N; i++)
            y += n0[i] * J0[i] * (J0[i] - 1) * pow(tau, J0[i] - 2);
        return y;
    }

    constexpr int I[N] {1,1,1,2,2,3};
    constexpr int J[N] {1,2,3,3,9,7};
    constexpr double n[N] {
        0.0015736404855259 ,  0.00090153761673944, -0.0050270077677648,
        2.2440037409485e-06, -4.1163275453471e-06,  3.7919454822955e-08
    };

    double gg(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * pow(pi, I[i]) * pow(tau, J[i]);
        return z;
    }

    double ggp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * pow(pi, I[i] - 1) * pow(tau, J[i]);
        return z;
    }

    double ggpp(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * (I[i] - 1) * pow(pi, I[i] - 2) * pow(tau, J[i]);
        return z;
    }

    double ggt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * J[i] * pow(pi, I[i]) * pow(tau, J[i] - 1);
        return z;
    }

    double ggtt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * J[i] * (J[i] - 1) * pow(pi, I[i]) * pow(tau, J[i] - 2);
        return z;
    }

    double ggpt(double pi, double tau)
    {
        double z = 0;
        for (int i = 0; i < N; i++)
            z += n[i] * I[i] * J[i] * pow(pi, I[i] - 1) * pow(tau, J[i] - 1);
        return z;
    }

    /**  Properties **/
    double v5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double v = .4615260e-3 * T * (g0p(pi) + ggp(pi, tau));  /// [m^3/kg]
        return v;
    }

    double u5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double u = .4615260 * T * (
            tau * (g0t(tau) + ggt(pi, tau)) -
            pi * (g0p(pi) + ggp(pi, tau)));  /// [kJ/kg]
        return u;
    }

    double s5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double s = .4615260 * (
            tau * (g0t(tau) + ggt(pi, tau)) - (g0(pi, tau) + gg(pi, tau))
        );  /// [kJ/kg/K]
        return s;
    }

    double h5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double h = .4615260e3 * (g0t(tau) + ggt(pi, tau));  /// [kJ/kg]
        return h;
    }

    double cp5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double cp = -.4615260 * tau * tau * (g0tt(tau) + ggtt(pi, tau));  /// [kJ/kg/K]
        return cp;
    }

    double cv5Tp(double T, double p)
    {
        /// test: c(2.1533778352104127, 2.1927482936648652, 2.3958943623580446)
        const double pi = p;
        const double tau = 1e3/T;
        const double cv = .4615260 * (
            -tau * tau * (g0tt(tau) + ggtt(pi, tau)) - pow(
                1 + pi * ggp(pi, tau) - tau * pi * ggpt(pi, tau), 2
              ) / (1 - pi * pi * ggpp(pi, tau))
        );  /// [kJ/kg/K]
        return cv;
    }

    double w5Tp(double T, double p)
    {
        const double pi = p;
        const double tau = 1e3/T;
        const double grp = ggp(pi, tau);
        const double w = sqrt(
            461.5260 * T * (1 + 2 * pi * grp + pi * pi * grp * grp) / (
                1 - pi * pi * ggpp(pi, tau) + pow(
                    1 + pi * grp - tau * pi * ggpt(pi, tau), 2
                )/tau/tau/(g0tt(tau) + ggtt(pi, tau))
            )
        );  /// [m/s]
        return w;
    }

    double e5Tp(double T, double p)
    {
        /// cubic expansion coefficient
        /// test: c(0.0006675389998334917, 0.0007169507536003152, 0.0005088306412790769)
        const double pi = p;
        const double tau = 1e3/T;
        const double grp = ggp(pi, tau);
        const double e = (1 + pi * grp - tau * pi * ggpt(pi, tau))/(1 + pi * grp)/T;  ///[1/K]
        return e;
    }

    double i5Tp(double T, double p)
    {
        /// isothermal compressibility
        /// test: c(2.0000385868728405, 0.03328812532599134, 0.03291938922687314)
        const double pi = p;
        const double tau = 1e3/T;
        const double i = (1 - pi * pi * ggpp(pi, tau))/(1 + pi * ggp(pi, tau))/p;  ///[1/MPa]
        return i;
    }
}


namespace r797tp
{
    int region(double T, double p)   /// Identify region number: 1, 2, 3, 5
    {
        constexpr double pmin {6.11212677444e-4};  /// minimum possible pressure, [MPa]
        constexpr double ps623 {16.5291642526};  /// saturation pressure at 623.15 K, [MPa]
        int id = -1;  /// error code

        if (1073.15 < T && T <= 2273.15 && pmin <= p && p <= 50) id = 5;
        else if (pmin <= p && p <= ps623) {
            const double tsat = r797satline::Tp(p);
            if (273.15 <= T && T <= tsat) id = 1;
            else if (tsat < T && T <= 1073.15) id = 2;
        }
        else if (ps623 < p && p <= 100){
            const double t23 = r797b23::Tp(p);
            if (273.15 <= T && T <= 623.15) id = 1;
            else if (623.15 < T && T < t23) id = 3;
            else if (t23 <= T && T <= 1073.15) id = 2;
        }
        return id;  /// possible values: -1, 1, 2, 3, 5
    }

    constexpr double error_code[2] {
          -10,  /// fail determine region
          -20   /// fail determine subregion in Region 3
    };

    /** Base properties */
    double vTp(double T, double p)  /// specific volume, [m³/kg]
    {
        const int id = region(T, p);
        double v = error_code[0];
        switch(id) {
            case 1: v = r797tp1::v1Tp(T, p);  break;
            case 2: v = r797tp2::v2Tp(T, p);  break;
            case 5: v = r797tp5::v5Tp(T, p);  break;
            case 3: {
              const double v3 = sr505tp3::v3Tp(T, p);
              v = (v3 < 0 ? error_code[1] : v3);
            }
        }
        return v;
    }


    /** Supplementary properties */
    double rTp(double T, double p)  /// mass density, [kg/m³]
    {
        const double v = vTp(T, p);
        if (v > 0) return 1/v;
        return (v > error_code[0] ? error_code[0] : v);
    }


}
